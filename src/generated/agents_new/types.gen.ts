// This file is auto-generated by @hey-api/openapi-ts

export type OptimisationRequest = {
    /**
     * The run ID that we want to subject to optimisation
     */
    run_id: string;
};

export type ProgressUpdate = {
    /**
     * The execution ID
     */
    execution_id: string;
    /**
     * The progress of the execution
     */
    progress: string;
    /**
     * The date and time the progress was created
     */
    created_at: string;
};

export type Agent = {
    /**
     * The name of the agent
     */
    name: string;
    /**
     * The description of the agent
     */
    description: string;
    /**
     * The visibility of the agent
     */
    visibility: string;
    /**
     * The required fields for the agent
     */
    required_fields: Array<string>;
    /**
     * The prompts for the agent
     */
    required_prompts: Array<string>;
};

/**
 * A JSON Schema that defines the expected structure and validation rules for workflow results.
 */
export type ResultSchema = {
    [key: string]: unknown;
};

export type CreateWorkflowRequest = {
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * The ID of the user that this workflow belongs to.
     */
    user_id?: string;
    result_schema: ResultSchema;
    /**
     * JSON object containing static workflow configuration (e.g. a prompt_template).
     */
    fields: {
        [key: string]: unknown;
    };
    /**
     * The prompts for the workflow. They can have variables in them. They will be merged with the dynamic data passed when the workflow is executed.
     */
    prompts: Array<string>;
    /**
     * The Language Model Provider for the Workflow
     */
    provider: 'openai' | 'anthropic';
};

export type Workflow = {
    /**
     * Workflow identifier.
     */
    id: string;
    /**
     * The ID of the user who created the workflow.
     */
    user_id: string;
    result_schema: ResultSchema;
    /**
     * Identifier of the associated agent.
     */
    agent_id: string;
    /**
     * The date and time the workflow was created.
     */
    created_at?: string;
    /**
     * Workflow name.
     */
    name: string;
    /**
     * Workflow configuration.
     */
    fields: {
        [key: string]: unknown;
    };
    /**
     * The prompts for the workflow. They can have variables in them. They will be merged with the dynamic data passed when the workflow is executed.
     */
    prompts: Array<string>;
    /**
     * The variables in the prompts.
     */
    prompt_variables?: Array<string>;
};

export type WorkflowExecution = {
    workflow: Workflow;
    executions: Array<Execution>;
};

/**
 * Dynamic values to be merged into the saved workflow configuration.
 */
export type WorkflowExecutionRequest = {
    [key: string]: unknown;
};

export type Execution = {
    /**
     * Execution identifier.
     */
    id: string;
    /**
     * Run ID.
     */
    run_id: string;
    /**
     * Dynamic data to be merged into the saved workflow configuration.
     */
    dynamic_data?: {
        [key: string]: unknown;
    };
    /**
     * Workflow ID.
     */
    workflow_id: string;
    status?: ExecutionStatus;
    /**
     * The result of the execution.
     */
    result: {
        [key: string]: unknown;
    };
    /**
     * The date and time the execution was created.
     */
    created_at: string;
    /**
     * The error that occurred during the execution.
     */
    error?: string;
};

export type ExecutionStatus = {
    /**
     * Execution ID.
     */
    execution_id: string;
    status: Status;
    /**
     * Reason for the status.
     */
    reason?: string;
    /**
     * The date and time the execution status was created.
     */
    created_at: string;
};

/**
 * Status of the execution.
 */
export type Status = 'starting' | 'running' | 'paused' | 'completed' | 'cancelled' | 'failed';

export type BrowserSession = {
    /**
     * Browser session identifier.
     */
    id?: string;
    /**
     * Browser name (Anchor, Browserbase, etc.)
     */
    browser_name?: string;
    /**
     * Execution ID.
     */
    execution_id?: string;
    /**
     * CDP URL.
     */
    cdp_url?: string;
    /**
     * Debugger URL.
     */
    debugger_url?: string;
    /**
     * Session ID.
     */
    session_id?: string;
    /**
     * Session URL.
     */
    session_url?: string;
    /**
     * Recording URL.
     */
    recording_url?: string;
};

export type SlackChannelRequest = {
    /**
     * Slack channel ID.
     */
    slack_channel_id: string;
};

export type File = {
    /**
     * Unique file identifier.
     */
    id: string;
    /**
     * Execution ID associated with the file.
     */
    execution_id: string;
    /**
     * Full GCS object path (e.g., "2023-10-21_14-05-01/1697892305-screenshot.png").
     */
    file_path: string;
    /**
     * File extension.
     */
    file_ext: string;
    /**
     * File name.
     */
    file_name: string;
    /**
     * Size of the file in bytes.
     */
    file_size: number;
    /**
     * MIME type of the file.
     */
    mime_type: string;
    /**
     * Timestamp when the file record was created.
     */
    created_at: string;
    /**
     * Signed URL to download the file.
     */
    signed_url: string;
};

export type GetOpenApiData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/openapi.yaml';
};

export type GetOpenApiResponses = {
    /**
     * OpenAPI schema
     */
    200: unknown;
};

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckErrors = {
    /**
     * API is unhealthy
     */
    500: {
        /**
         * The error message
         */
        error?: string;
    };
};

export type HealthCheckError = HealthCheckErrors[keyof HealthCheckErrors];

export type HealthCheckResponses = {
    /**
     * API is healthy
     */
    200: {
        /**
         * The health status of the API
         */
        status?: string;
    };
};

export type HealthCheckResponse = HealthCheckResponses[keyof HealthCheckResponses];

export type GetAgentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/agents';
};

export type GetAgentsResponses = {
    /**
     * List of agents
     */
    200: Array<Agent>;
};

export type GetAgentsResponse = GetAgentsResponses[keyof GetAgentsResponses];

export type QueueOptimisationJobData = {
    body?: OptimisationRequest;
    path?: never;
    query?: never;
    url: '/optimiser';
};

export type QueueOptimisationJobResponses = {
    /**
     * Optimiser job created
     */
    202: unknown;
};

export type CreateWorkflowData = {
    body: CreateWorkflowRequest;
    path: {
        agent_name: string;
    };
    query?: never;
    url: '/workflow/{agent_name}/create';
};

export type CreateWorkflowErrors = {
    /**
     * Invalid input
     */
    400: unknown;
};

export type CreateWorkflowResponses = {
    /**
     * The ID of the workflow
     */
    201: string;
};

export type CreateWorkflowResponse = CreateWorkflowResponses[keyof CreateWorkflowResponses];

export type DeleteWorkflowData = {
    body?: never;
    path: {
        workflow_id: string;
    };
    query?: never;
    url: '/workflow/{workflow_id}';
};

export type DeleteWorkflowErrors = {
    /**
     * Workflow not found
     */
    404: {
        error?: string;
    };
};

export type DeleteWorkflowError = DeleteWorkflowErrors[keyof DeleteWorkflowErrors];

export type DeleteWorkflowResponses = {
    /**
     * Workflow deleted successfully
     */
    200: {
        result?: string;
    };
};

export type DeleteWorkflowResponse = DeleteWorkflowResponses[keyof DeleteWorkflowResponses];

export type GetWorkflowData = {
    body?: never;
    path: {
        workflow_id: string;
    };
    query?: never;
    url: '/workflow/{workflow_id}';
};

export type GetWorkflowErrors = {
    /**
     * Workflow not found
     */
    404: unknown;
};

export type GetWorkflowResponses = {
    /**
     * Workflow
     */
    200: Workflow;
};

export type GetWorkflowResponse = GetWorkflowResponses[keyof GetWorkflowResponses];

export type ExecuteWorkflowData = {
    body: WorkflowExecutionRequest;
    path: {
        workflow_id: string;
    };
    query?: never;
    url: '/workflow/{workflow_id}';
};

export type ExecuteWorkflowErrors = {
    /**
     * Invalid input or missing required fields
     */
    400: unknown;
};

export type ExecuteWorkflowResponses = {
    /**
     * Workflow executed successfully, job queued
     */
    202: string;
};

export type ExecuteWorkflowResponse = ExecuteWorkflowResponses[keyof ExecuteWorkflowResponses];

export type GetExecutionsForWorkflowData = {
    body?: never;
    path: {
        workflow_id: string;
    };
    query?: never;
    url: '/workflow/{workflow_id}/executions';
};

export type GetExecutionsForWorkflowResponses = {
    /**
     * Executions for the workflow
     */
    200: Array<Execution>;
};

export type GetExecutionsForWorkflowResponse = GetExecutionsForWorkflowResponses[keyof GetExecutionsForWorkflowResponses];

export type DeleteExecutionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/execution/{id}';
};

export type DeleteExecutionErrors = {
    /**
     * Execution not found
     */
    404: {
        error?: string;
    };
};

export type DeleteExecutionError = DeleteExecutionErrors[keyof DeleteExecutionErrors];

export type DeleteExecutionResponses = {
    /**
     * Execution deleted successfully
     */
    200: {
        result?: string;
    };
};

export type DeleteExecutionResponse = DeleteExecutionResponses[keyof DeleteExecutionResponses];

export type GetExecutionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/execution/{id}';
};

export type GetExecutionErrors = {
    /**
     * Execution not found
     */
    404: unknown;
};

export type GetExecutionResponses = {
    /**
     * Execution
     */
    200: Execution;
};

export type GetExecutionResponse = GetExecutionResponses[keyof GetExecutionResponses];

export type UpdateExecutionStatusData = {
    body: ExecutionStatus;
    path: {
        id: string;
    };
    query?: never;
    url: '/execution/{id}/status';
};

export type UpdateExecutionStatusErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Execution not found
     */
    404: unknown;
};

export type UpdateExecutionStatusResponses = {
    /**
     * Execution status updated
     */
    200: unknown;
};

export type GetBrowserSessionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/execution/{id}/browser_session';
};

export type GetBrowserSessionErrors = {
    /**
     * Browser session not found
     */
    404: unknown;
};

export type GetBrowserSessionResponses = {
    /**
     * Browser session
     */
    200: BrowserSession;
};

export type GetBrowserSessionResponse = GetBrowserSessionResponses[keyof GetBrowserSessionResponses];

export type SetSlackChannelData = {
    body: SlackChannelRequest;
    path?: never;
    query?: never;
    url: '/slack_channel';
};

export type SetSlackChannelErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Execution not found
     */
    404: unknown;
};

export type SetSlackChannelResponses = {
    /**
     * Slack channel set
     */
    200: unknown;
};

export type GetAgentWorkflowExecutionsData = {
    body?: never;
    path: {
        agent_name: string;
    };
    query?: never;
    url: '/agent/{agent_name}/workflows';
};

export type GetAgentWorkflowExecutionsResponses = {
    /**
     * List of workflow executions
     */
    200: Array<WorkflowExecution>;
};

export type GetAgentWorkflowExecutionsResponse = GetAgentWorkflowExecutionsResponses[keyof GetAgentWorkflowExecutionsResponses];

export type GetExecutionProgressData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/execution/{id}/progress';
};

export type GetExecutionProgressErrors = {
    /**
     * Execution not found
     */
    404: unknown;
};

export type GetExecutionProgressResponses = {
    /**
     * Progress of the execution
     */
    200: Array<ProgressUpdate>;
};

export type GetExecutionProgressResponse = GetExecutionProgressResponses[keyof GetExecutionProgressResponses];

export type GetExecutionFilesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/execution/{id}/files';
};

export type GetExecutionFilesErrors = {
    /**
     * Execution files not found.
     */
    404: unknown;
};

export type GetExecutionFilesResponses = {
    /**
     * List of file records associated with the execution.
     */
    200: Array<File>;
};

export type GetExecutionFilesResponse = GetExecutionFilesResponses[keyof GetExecutionFilesResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}/api/v1` | (string & {});
};