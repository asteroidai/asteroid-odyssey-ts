// This file is auto-generated by @hey-api/openapi-ts

export type ActivityPayloadUnionActionCompleted = {
    activityType: 'action_completed';
    data: AgentsExecutionActivityActionCompletedPayload;
};

export type ActivityPayloadUnionActionFailed = {
    activityType: 'action_failed';
    data: AgentsExecutionActivityActionFailedPayload;
};

export type ActivityPayloadUnionActionStarted = {
    activityType: 'action_started';
    data: AgentsExecutionActivityActionStartedPayload;
};

export type ActivityPayloadUnionFileAdded = {
    activityType: 'file_added';
    data: AgentsExecutionActivityFileAddedPayload;
};

export type ActivityPayloadUnionGeneric = {
    activityType: 'generic';
    data: AgentsExecutionActivityGenericPayload;
};

export type ActivityPayloadUnionGraphUpdated = {
    activityType: 'graph_updated';
    data: AgentsExecutionActivityGraphUpdatedPayload;
};

export type ActivityPayloadUnionStatusChanged = {
    activityType: 'status_changed';
    data: AgentsExecutionActivityStatusChangedPayload;
};

export type ActivityPayloadUnionStepCompleted = {
    activityType: 'step_completed';
    data: AgentsExecutionActivityStepCompletedPayload;
};

export type ActivityPayloadUnionStepStarted = {
    activityType: 'step_started';
    data: AgentsExecutionActivityStepStartedPayload;
};

export type ActivityPayloadUnionTerminal = {
    activityType: 'terminal';
    data: AgentsExecutionTerminalPayload;
};

export type ActivityPayloadUnionTransitionedNode = {
    activityType: 'transitioned_node';
    data: AgentsExecutionActivityTransitionedNodePayload;
};

export type ActivityPayloadUnionUserMessageReceived = {
    activityType: 'user_message_received';
    data: AgentsExecutionActivityUserMessageReceivedPayload;
};

export type AgentsAgentBase = {
    id: CommonUuid;
    name: string;
    createdAt: string;
    organizationId?: CommonUuid;
    userId: CommonUuid;
};

export type AgentsAgentSortField = 'name' | 'created_at';

export type AgentsExecutionActivity = {
    id: CommonUuid;
    payload: AgentsExecutionActivityPayloadUnion;
    executionId: CommonUuid;
    timestamp: string;
};

export type AgentsExecutionActivityActionCompletedPayload = {
    message: string;
};

export type AgentsExecutionActivityActionFailedPayload = {
    message: string;
};

export type AgentsExecutionActivityActionStartedPayload = {
    message: string;
};

export type AgentsExecutionActivityFileAddedPayload = {
    fileId: CommonUuid;
    fileName: string;
    mimeType: string;
    fileSize: number;
    source: 'upload' | 'download';
    presignedUrl: string;
};

export type AgentsExecutionActivityGenericPayload = {
    message: string;
};

export type AgentsExecutionActivityGraphUpdatedPayload = {
    graphUpdate: Array<AgentsExecutionGraphUpdate>;
};

export type AgentsExecutionActivityPayloadUnion = ({
    activityType: 'terminal';
} & ActivityPayloadUnionTerminal) | ({
    activityType: 'generic';
} & ActivityPayloadUnionGeneric) | ({
    activityType: 'step_started';
} & ActivityPayloadUnionStepStarted) | ({
    activityType: 'step_completed';
} & ActivityPayloadUnionStepCompleted) | ({
    activityType: 'transitioned_node';
} & ActivityPayloadUnionTransitionedNode) | ({
    activityType: 'status_changed';
} & ActivityPayloadUnionStatusChanged) | ({
    activityType: 'action_started';
} & ActivityPayloadUnionActionStarted) | ({
    activityType: 'action_completed';
} & ActivityPayloadUnionActionCompleted) | ({
    activityType: 'action_failed';
} & ActivityPayloadUnionActionFailed) | ({
    activityType: 'user_message_received';
} & ActivityPayloadUnionUserMessageReceived) | ({
    activityType: 'file_added';
} & ActivityPayloadUnionFileAdded) | ({
    activityType: 'graph_updated';
} & ActivityPayloadUnionGraphUpdated);

export type AgentsExecutionActivityStatusChangedPayload = {
    status: AgentsExecutionStatus;
    completedPayload?: AgentsExecutionCompletedPayload;
    failedPayload?: AgentsExecutionFailedPayload;
    pausedPayload?: AgentsExecutionPausedPayload;
    awaitingConfirmationPayload?: AgentsExecutionAwaitingConfirmationPayload;
    cancelledPayload?: AgentsExecutionCancelledPayload;
};

export type AgentsExecutionActivityStepCompletedPayload = {
    stepNumber: number;
};

export type AgentsExecutionActivityStepStartedPayload = {
    stepNumber: number;
};

export type AgentsExecutionActivityTransitionedNodePayload = {
    newNodeUUID: CommonUuid;
    newNodeName: string;
};

export type AgentsExecutionActivityUserMessageReceivedPayload = {
    message: string;
    userUUID: CommonUuid;
};

export type AgentsExecutionAwaitingConfirmationPayload = {
    reason: string;
};

export type AgentsExecutionCancelReason = 'timeout' | 'max_steps' | 'user_requested';

export type AgentsExecutionCancelledPayload = {
    reason: AgentsExecutionCancelReason;
};

export type AgentsExecutionCompletedPayload = {
    outcome: 'success' | 'failure';
    reasoning: string;
    final_answer?: string;
    result: unknown;
};

export type AgentsExecutionFailedPayload = {
    reason: string;
};

export type AgentsExecutionGraphUpdate = {
    updateType: AgentsExecutionUpdateType;
    nodeDetails?: AgentsExecutionNodeDetails;
    transitionDetails?: AgentsExecutionTransitionDetails;
};

export type AgentsExecutionNodeDetails = {
    nodeID: CommonUuid;
    nodeName: string;
    nodeType: string;
};

export type AgentsExecutionPausedPayload = {
    reason: string;
};

export type AgentsExecutionStatus = 'starting' | 'running' | 'paused' | 'awaiting_confirmation' | 'completed' | 'cancelled' | 'failed' | 'paused_by_agent';

export type AgentsExecutionTerminalPayload = {
    reason: 'unsubscribe' | 'complete' | 'error';
    message?: string;
};

export type AgentsExecutionTransitionDetails = {
    transitionID: CommonUuid;
    transitionType: string;
};

export type AgentsExecutionUpdateType = 'add' | 'edit' | 'delete';

export type AgentsExecutionUserMessagesAddTextBody = {
    message: string;
};

export type AgentsFilesFile = {
    id: CommonUuid;
    executionId: CommonUuid;
    agentId: CommonUuid;
    filePath: string;
    fileName: string;
    fileExt: string;
    fileSize: number;
    fileType: string;
    mimeType: string;
    createdAt: string;
    signedUrl: string;
};

export type AgentsFilesFilePart = Blob | File;

export type CommonBadRequestErrorBody = {
    code: 400;
    message: string;
};

export type CommonError = {
    code: number;
    message: string;
};

export type CommonForbiddenErrorBody = {
    code: 403;
    message: string;
};

export type CommonNotFoundErrorBody = {
    code: 404;
    message: string;
};

export type CommonSortDirection = 'asc' | 'desc';

export type CommonUuid = string;

export type Version = 'v1';

export type AgentsAgentSearch = string;

export type CommonPaginationPage = number;

export type CommonPaginationPageSize = number;

export type AgentListData = {
    body?: never;
    path?: never;
    query: {
        organizationId?: CommonUuid;
        pageSize: number;
        page: number;
        searchName?: string;
        sort_field?: AgentsAgentSortField;
        sort_direction?: CommonSortDirection;
    };
    url: '/agents';
};

export type AgentListErrors = {
    /**
     * An unexpected error response.
     */
    default: CommonError;
};

export type AgentListError = AgentListErrors[keyof AgentListErrors];

export type AgentListResponses = {
    /**
     * The request has succeeded.
     */
    200: {
        items: Array<AgentsAgentBase>;
        page: number;
        pageSize: number;
        total: number;
    };
};

export type AgentListResponse = AgentListResponses[keyof AgentListResponses];

export type ExecutionActivitiesGetData = {
    body?: never;
    path: {
        /**
         * The unique identifier of the execution
         */
        executionId: CommonUuid;
    };
    query?: {
        /**
         * Sort order for activities by timestamp
         */
        order?: 'asc' | 'desc';
        /**
         * Maximum number of activities to return
         */
        limit?: number;
    };
    url: '/executions/{executionId}/activities';
};

export type ExecutionActivitiesGetErrors = {
    /**
     * The server could not understand the request due to invalid syntax.
     */
    400: CommonBadRequestErrorBody;
    /**
     * Access is forbidden.
     */
    403: CommonForbiddenErrorBody;
    /**
     * The server cannot find the requested resource.
     */
    404: CommonNotFoundErrorBody;
};

export type ExecutionActivitiesGetError = ExecutionActivitiesGetErrors[keyof ExecutionActivitiesGetErrors];

export type ExecutionActivitiesGetResponses = {
    /**
     * The request has succeeded.
     */
    200: Array<AgentsExecutionActivity>;
};

export type ExecutionActivitiesGetResponse = ExecutionActivitiesGetResponses[keyof ExecutionActivitiesGetResponses];

export type ExecutionContextFilesGetData = {
    body?: never;
    path: {
        executionId: CommonUuid;
    };
    query?: never;
    url: '/executions/{executionId}/context-files';
};

export type ExecutionContextFilesGetErrors = {
    /**
     * The server cannot find the requested resource.
     */
    404: 'Execution files not found.';
};

export type ExecutionContextFilesGetError = ExecutionContextFilesGetErrors[keyof ExecutionContextFilesGetErrors];

export type ExecutionContextFilesGetResponses = {
    /**
     * The request has succeeded.
     */
    200: Array<AgentsFilesFile>;
};

export type ExecutionContextFilesGetResponse = ExecutionContextFilesGetResponses[keyof ExecutionContextFilesGetResponses];

export type ExecutionContextFilesUploadData = {
    body: {
        files: Array<AgentsFilesFilePart>;
    };
    path: {
        executionId: CommonUuid;
    };
    query?: never;
    url: '/executions/{executionId}/context-files';
};

export type ExecutionContextFilesUploadErrors = {
    /**
     * The server could not understand the request due to invalid syntax.
     */
    400: 'Invalid file upload request.';
    /**
     * The server cannot find the requested resource.
     */
    404: 'Execution not found.';
};

export type ExecutionContextFilesUploadError = ExecutionContextFilesUploadErrors[keyof ExecutionContextFilesUploadErrors];

export type ExecutionContextFilesUploadResponses = {
    /**
     * The request has succeeded.
     */
    200: 'Files uploaded.';
};

export type ExecutionContextFilesUploadResponse = ExecutionContextFilesUploadResponses[keyof ExecutionContextFilesUploadResponses];

export type ExecutionUserMessagesAddData = {
    /**
     * The message content to send
     */
    body: AgentsExecutionUserMessagesAddTextBody;
    path: {
        /**
         * The unique identifier of the execution
         */
        executionId: CommonUuid;
    };
    query?: never;
    url: '/executions/{executionId}/user-messages';
};

export type ExecutionUserMessagesAddErrors = {
    /**
     * The server could not understand the request due to invalid syntax.
     */
    400: CommonBadRequestErrorBody;
    /**
     * Access is forbidden.
     */
    403: CommonForbiddenErrorBody;
    /**
     * The server cannot find the requested resource.
     */
    404: CommonNotFoundErrorBody;
};

export type ExecutionUserMessagesAddError = ExecutionUserMessagesAddErrors[keyof ExecutionUserMessagesAddErrors];

export type ExecutionUserMessagesAddResponses = {
    /**
     * The request has succeeded and a new resource has been created as a result.
     */
    201: 'User message added.';
};

export type ExecutionUserMessagesAddResponse = ExecutionUserMessagesAddResponses[keyof ExecutionUserMessagesAddResponses];

export type ClientOptions = {
    baseUrl: 'https://odyssey.asteroid.ai/agents/v2' | (string & {});
};