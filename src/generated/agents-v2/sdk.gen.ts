// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ActivitiesGetData, ActivitiesGetResponse, ActivitiesGetError, ContextFilesGetData, ContextFilesGetResponse, ContextFilesGetError, UserMessagesAddData, UserMessagesAddResponse, UserMessagesAddError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Retrieve execution activities
 * Get activities for an execution
 */
export const activitiesGet = <ThrowOnError extends boolean = false>(options: Options<ActivitiesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActivitiesGetResponse, ActivitiesGetError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/executions/{executionId}/activities',
        ...options
    });
};

export const contextFilesGet = <ThrowOnError extends boolean = false>(options: Options<ContextFilesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContextFilesGetResponse, ContextFilesGetError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/executions/{executionId}/context-files',
        ...options
    });
};

/**
 * Send user message to execution
 * Add a user message to an execution
 */
export const userMessagesAdd = <ThrowOnError extends boolean = false>(options: Options<UserMessagesAddData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserMessagesAddResponse, UserMessagesAddError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/executions/{executionId}/user-messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};