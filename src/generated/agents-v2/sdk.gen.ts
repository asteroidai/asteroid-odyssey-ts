// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { AgentListData, AgentListResponses, AgentListErrors, ExecutionActivitiesGetData, ExecutionActivitiesGetResponses, ExecutionActivitiesGetErrors, ExecutionContextFilesGetData, ExecutionContextFilesGetResponses, ExecutionContextFilesGetErrors, ExecutionContextFilesUploadData, ExecutionContextFilesUploadResponses, ExecutionContextFilesUploadErrors, ExecutionUserMessagesAddData, ExecutionUserMessagesAddResponses, ExecutionUserMessagesAddErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const agentList = <ThrowOnError extends boolean = false>(options: Options<AgentListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AgentListResponses, AgentListErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agents',
        ...options
    });
};

/**
 * Retrieve execution activities
 * Get activities for an execution
 */
export const executionActivitiesGet = <ThrowOnError extends boolean = false>(options: Options<ExecutionActivitiesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExecutionActivitiesGetResponses, ExecutionActivitiesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/executions/{executionId}/activities',
        ...options
    });
};

export const executionContextFilesGet = <ThrowOnError extends boolean = false>(options: Options<ExecutionContextFilesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExecutionContextFilesGetResponses, ExecutionContextFilesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/executions/{executionId}/context-files',
        ...options
    });
};

export const executionContextFilesUpload = <ThrowOnError extends boolean = false>(options: Options<ExecutionContextFilesUploadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecutionContextFilesUploadResponses, ExecutionContextFilesUploadErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/executions/{executionId}/context-files',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Send user message to execution
 * Add a user message to an execution
 */
export const executionUserMessagesAdd = <ThrowOnError extends boolean = false>(options: Options<ExecutionUserMessagesAddData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecutionUserMessagesAddResponses, ExecutionUserMessagesAddErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/executions/{executionId}/user-messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};