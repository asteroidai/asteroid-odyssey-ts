// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { GetOpenApiData, GetOpenApiResponses, UploadExecutionFilesData, UploadExecutionFilesResponses, UploadExecutionFilesErrors, HealthCheckData, HealthCheckResponses, HealthCheckErrors, ExecuteAgentData, ExecuteAgentResponses, ExecuteAgentErrors, ExecuteAgentStructuredData, ExecuteAgentStructuredResponses, ExecuteAgentStructuredErrors, GetExecutionStatusData, GetExecutionStatusResponses, GetExecutionStatusErrors, GetExecutionResultData, GetExecutionResultResponses, GetExecutionResultErrors, GetBrowserSessionRecordingData, GetBrowserSessionRecordingResponses, GetBrowserSessionRecordingErrors, GetAgentProfilesData, GetAgentProfilesResponses, GetAgentProfilesErrors, CreateAgentProfileData, CreateAgentProfileResponses, CreateAgentProfileErrors, DeleteAgentProfileData, DeleteAgentProfileResponses, DeleteAgentProfileErrors, GetAgentProfileData, GetAgentProfileResponses, GetAgentProfileErrors, UpdateAgentProfileData, UpdateAgentProfileResponses, UpdateAgentProfileErrors, GetCredentialsPublicKeyData, GetCredentialsPublicKeyResponses, GetCredentialsPublicKeyErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get the OpenAPI schema
 */
export const getOpenApi = <ThrowOnError extends boolean = false>(options?: Options<GetOpenApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOpenApiResponses, unknown, ThrowOnError>({
        url: '/openapi.yaml',
        ...options
    });
};

/**
 * Upload files to an execution
 */
export const uploadExecutionFiles = <ThrowOnError extends boolean = false>(options: Options<UploadExecutionFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadExecutionFilesResponses, UploadExecutionFilesErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/files',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Check the health of the API
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponses, HealthCheckErrors, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Execute an agent
 * Executes an agent with the provided parameters
 * @deprecated
 */
export const executeAgent = <ThrowOnError extends boolean = false>(options: Options<ExecuteAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecuteAgentResponses, ExecuteAgentErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Execute an agent with structured parameters
 * Executes an agent with structured parameters including optional agent profile configuration. This is the recommended method for new integrations.
 */
export const executeAgentStructured = <ThrowOnError extends boolean = false>(options: Options<ExecuteAgentStructuredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecuteAgentStructuredResponses, ExecuteAgentStructuredErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent/{id}/execute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get execution status
 */
export const getExecutionStatus = <ThrowOnError extends boolean = false>(options: Options<GetExecutionStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionStatusResponses, GetExecutionStatusErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/status',
        ...options
    });
};

/**
 * Get execution result
 */
export const getExecutionResult = <ThrowOnError extends boolean = false>(options: Options<GetExecutionResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionResultResponses, GetExecutionResultErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/result',
        ...options
    });
};

/**
 * Get browser session recording
 * Retrieves the browser session recording URL for a completed execution
 */
export const getBrowserSessionRecording = <ThrowOnError extends boolean = false>(options: Options<GetBrowserSessionRecordingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBrowserSessionRecordingResponses, GetBrowserSessionRecordingErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/browser_session/recording',
        ...options
    });
};

/**
 * Get agent profiles
 * Returns all agent profiles for the organization. If organization_id is not provided, returns profiles for all user's organizations.
 */
export const getAgentProfiles = <ThrowOnError extends boolean = false>(options?: Options<GetAgentProfilesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAgentProfilesResponses, GetAgentProfilesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles',
        ...options
    });
};

/**
 * Create an agent profile
 * Creates a new agent profile for the organization
 */
export const createAgentProfile = <ThrowOnError extends boolean = false>(options: Options<CreateAgentProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAgentProfileResponses, CreateAgentProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an agent profile
 * Deletes the specified agent profile
 */
export const deleteAgentProfile = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAgentProfileResponses, DeleteAgentProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles/{profile_id}',
        ...options
    });
};

/**
 * Get an agent profile by ID
 * Returns the complete agent profile including credentials
 */
export const getAgentProfile = <ThrowOnError extends boolean = false>(options: Options<GetAgentProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentProfileResponses, GetAgentProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles/{profile_id}',
        ...options
    });
};

/**
 * Update an agent profile
 * Updates an agent profile including metadata and/or credentials
 */
export const updateAgentProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateAgentProfileResponses, UpdateAgentProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles/{profile_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the public key for credentials
 */
export const getCredentialsPublicKey = <ThrowOnError extends boolean = false>(options?: Options<GetCredentialsPublicKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCredentialsPublicKeyResponses, GetCredentialsPublicKeyErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/credentials/public_key',
        ...options
    });
};