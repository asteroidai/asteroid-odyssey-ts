// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetOpenApiData, HealthCheckData, HealthCheckResponse, HealthCheckError, GetAgentsData, GetAgentsResponse, QueueOptimisationJobData, CreateWorkflowData, CreateWorkflowResponse, DeleteWorkflowData, DeleteWorkflowResponse, DeleteWorkflowError, GetWorkflowData, GetWorkflowResponse, ExecuteWorkflowData, ExecuteWorkflowResponse, GetExecutionsForWorkflowData, GetExecutionsForWorkflowResponse, DeleteExecutionData, DeleteExecutionResponse, DeleteExecutionError, GetExecutionData, GetExecutionResponse, UpdateExecutionStatusData, GetBrowserSessionData, GetBrowserSessionResponse, SetSlackChannelData, GetAgentWorkflowExecutionsData, GetAgentWorkflowExecutionsResponse, GetExecutionProgressData, GetExecutionProgressResponse, GetExecutionFilesData, GetExecutionFilesResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get the OpenAPI schema
 */
export const getOpenApi = <ThrowOnError extends boolean = false>(options?: Options<GetOpenApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/openapi.yaml',
        ...options
    });
};

/**
 * Check the health of the API
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Get all agents
 */
export const getAgents = <ThrowOnError extends boolean = false>(options?: Options<GetAgentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAgentsResponse, unknown, ThrowOnError>({
        url: '/agents',
        ...options
    });
};

/**
 * Queue an optimisation job
 */
export const queueOptimisationJob = <ThrowOnError extends boolean = false>(options?: Options<QueueOptimisationJobData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/optimiser',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new workflow for an agent
 */
export const createWorkflow = <ThrowOnError extends boolean = false>(options: Options<CreateWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWorkflowResponse, unknown, ThrowOnError>({
        url: '/workflow/{agent_name}/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a workflow
 */
export const deleteWorkflow = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkflowResponse, DeleteWorkflowError, ThrowOnError>({
        url: '/workflow/{workflow_id}',
        ...options
    });
};

/**
 * Get a workflow
 */
export const getWorkflow = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowResponse, unknown, ThrowOnError>({
        url: '/workflow/{workflow_id}',
        ...options
    });
};

/**
 * Execute a saved workflow for an agent
 */
export const executeWorkflow = <ThrowOnError extends boolean = false>(options: Options<ExecuteWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecuteWorkflowResponse, unknown, ThrowOnError>({
        url: '/workflow/{workflow_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all executions for a workflow
 */
export const getExecutionsForWorkflow = <ThrowOnError extends boolean = false>(options: Options<GetExecutionsForWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionsForWorkflowResponse, unknown, ThrowOnError>({
        url: '/workflow/{workflow_id}/executions',
        ...options
    });
};

/**
 * Delete an execution
 */
export const deleteExecution = <ThrowOnError extends boolean = false>(options: Options<DeleteExecutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExecutionResponse, DeleteExecutionError, ThrowOnError>({
        url: '/execution/{id}',
        ...options
    });
};

/**
 * Get an execution
 */
export const getExecution = <ThrowOnError extends boolean = false>(options: Options<GetExecutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionResponse, unknown, ThrowOnError>({
        url: '/execution/{id}',
        ...options
    });
};

/**
 * Update the status of an execution
 */
export const updateExecutionStatus = <ThrowOnError extends boolean = false>(options: Options<UpdateExecutionStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/execution/{id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the browser session for an execution
 */
export const getBrowserSession = <ThrowOnError extends boolean = false>(options: Options<GetBrowserSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBrowserSessionResponse, unknown, ThrowOnError>({
        url: '/execution/{id}/browser_session',
        ...options
    });
};

/**
 * Set your slack notification channel
 */
export const setSlackChannel = <ThrowOnError extends boolean = false>(options: Options<SetSlackChannelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/slack_channel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all workflows and their executions
 */
export const getAgentWorkflowExecutions = <ThrowOnError extends boolean = false>(options: Options<GetAgentWorkflowExecutionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentWorkflowExecutionsResponse, unknown, ThrowOnError>({
        url: '/agent/{agent_name}/workflows',
        ...options
    });
};

/**
 * Get the progress of an execution
 */
export const getExecutionProgress = <ThrowOnError extends boolean = false>(options: Options<GetExecutionProgressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionProgressResponse, unknown, ThrowOnError>({
        url: '/execution/{id}/progress',
        ...options
    });
};

/**
 * Get files for an execution
 */
export const getExecutionFiles = <ThrowOnError extends boolean = false>(options: Options<GetExecutionFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionFilesResponse, unknown, ThrowOnError>({
        url: '/execution/{id}/files',
        ...options
    });
};