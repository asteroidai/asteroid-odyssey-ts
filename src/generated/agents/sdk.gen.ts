// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetOpenApiData, UploadExecutionFilesData, UploadExecutionFilesResponse, UploadExecutionFilesError, HealthCheckData, HealthCheckResponse, HealthCheckError, ExecuteAgentData, ExecuteAgentResponse, ExecuteAgentError, ExecuteAgentStructuredData, ExecuteAgentStructuredResponse, ExecuteAgentStructuredError, GetExecutionStatusData, GetExecutionStatusResponse, GetExecutionStatusError, GetExecutionResultData, GetExecutionResultResponse, GetExecutionResultError, GetBrowserSessionRecordingData, GetBrowserSessionRecordingResponse, GetBrowserSessionRecordingError, GetAgentProfilesData, GetAgentProfilesResponse, GetAgentProfilesError, CreateAgentProfileData, CreateAgentProfileResponse, CreateAgentProfileError, DeleteAgentProfileData, DeleteAgentProfileResponse, DeleteAgentProfileError, GetAgentProfileData, GetAgentProfileResponse, GetAgentProfileError, UpdateAgentProfileData, UpdateAgentProfileResponse, UpdateAgentProfileError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get the OpenAPI schema
 */
export const getOpenApi = <ThrowOnError extends boolean = false>(options?: Options<GetOpenApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/openapi.yaml',
        ...options
    });
};

/**
 * Upload files to an execution
 */
export const uploadExecutionFiles = <ThrowOnError extends boolean = false>(options: Options<UploadExecutionFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadExecutionFilesResponse, UploadExecutionFilesError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/files',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Check the health of the API
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * @deprecated
 * Execute an agent
 * Executes an agent with the provided parameters
 */
export const executeAgent = <ThrowOnError extends boolean = false>(options: Options<ExecuteAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecuteAgentResponse, ExecuteAgentError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Execute an agent with structured parameters
 * Executes an agent with structured parameters including optional agent profile configuration. This is the recommended method for new integrations.
 */
export const executeAgentStructured = <ThrowOnError extends boolean = false>(options: Options<ExecuteAgentStructuredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecuteAgentStructuredResponse, ExecuteAgentStructuredError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent/{id}/execute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get execution status
 */
export const getExecutionStatus = <ThrowOnError extends boolean = false>(options: Options<GetExecutionStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionStatusResponse, GetExecutionStatusError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/status',
        ...options
    });
};

/**
 * Get execution result
 */
export const getExecutionResult = <ThrowOnError extends boolean = false>(options: Options<GetExecutionResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionResultResponse, GetExecutionResultError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/result',
        ...options
    });
};

/**
 * Get browser session recording
 * Retrieves the browser session recording URL for a completed execution
 */
export const getBrowserSessionRecording = <ThrowOnError extends boolean = false>(options: Options<GetBrowserSessionRecordingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBrowserSessionRecordingResponse, GetBrowserSessionRecordingError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/browser_session/recording',
        ...options
    });
};

/**
 * Get agent profiles
 * Returns all agent profiles for the organization. If organization_id is not provided, returns profiles for all user's organizations.
 */
export const getAgentProfiles = <ThrowOnError extends boolean = false>(options?: Options<GetAgentProfilesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAgentProfilesResponse, GetAgentProfilesError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles',
        ...options
    });
};

/**
 * Create an agent profile
 * Creates a new agent profile for the organization
 */
export const createAgentProfile = <ThrowOnError extends boolean = false>(options: Options<CreateAgentProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAgentProfileResponse, CreateAgentProfileError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an agent profile
 * Deletes the specified agent profile
 */
export const deleteAgentProfile = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAgentProfileResponse, DeleteAgentProfileError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles/{profile_id}',
        ...options
    });
};

/**
 * Get an agent profile by ID
 * Returns the complete agent profile including credentials
 */
export const getAgentProfile = <ThrowOnError extends boolean = false>(options: Options<GetAgentProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentProfileResponse, GetAgentProfileError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles/{profile_id}',
        ...options
    });
};

/**
 * Update an agent profile
 * Updates an agent profile including metadata and/or credentials
 */
export const updateAgentProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateAgentProfileResponse, UpdateAgentProfileError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent-profiles/{profile_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};