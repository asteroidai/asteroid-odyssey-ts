// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetOpenApiData, HealthCheckData, HealthCheckResponse, HealthCheckError, ExecuteAgentData, ExecuteAgentResponse, ExecuteAgentError, GetExecutionStatusData, GetExecutionStatusResponse, GetExecutionStatusError, GetExecutionResultData, GetExecutionResultResponse, GetExecutionResultError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get the OpenAPI schema
 */
export const getOpenApi = <ThrowOnError extends boolean = false>(options?: Options<GetOpenApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/openapi.yaml',
        ...options
    });
};

/**
 * Check the health of the API
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Execute an agent
 * Executes an agent with the provided parameters
 */
export const executeAgent = <ThrowOnError extends boolean = false>(options: Options<ExecuteAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecuteAgentResponse, ExecuteAgentError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/agent/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get execution status
 */
export const getExecutionStatus = <ThrowOnError extends boolean = false>(options: Options<GetExecutionStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionStatusResponse, GetExecutionStatusError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/status',
        ...options
    });
};

/**
 * Get execution result
 */
export const getExecutionResult = <ThrowOnError extends boolean = false>(options: Options<GetExecutionResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExecutionResultResponse, GetExecutionResultError, ThrowOnError>({
        security: [
            {
                name: 'X-Asteroid-Agents-Api-Key',
                type: 'apiKey'
            }
        ],
        url: '/execution/{id}/result',
        ...options
    });
};