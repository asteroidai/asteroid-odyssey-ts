// This file is auto-generated by @hey-api/openapi-ts

/**
 * Request to execute an agent with specific parameters
 */
export type AgentExecutionRequest = {
    [key: string]: unknown;
};

export type ExecutionResponse = {
    /**
     * The ID of the execution
     */
    execution_id: string;
};

export type ExecutionStatusResponse = {
    /**
     * The ID of the execution
     */
    execution_id: string;
    status: Status;
    /**
     * Reason for the current status (if applicable)
     */
    reason?: string;
    /**
     * Time when the status was last updated
     */
    updated_at?: string;
};

export type ExecutionResultResponse = {
    /**
     * The ID of the execution
     */
    execution_id: string;
    status: Status;
    /**
     * The execution result data (if execution is completed)
     */
    result?: {
        [key: string]: unknown;
    };
    /**
     * Error message (if execution failed)
     */
    error?: string;
};

/**
 * Status of the execution
 */
export type Status = 'starting' | 'running' | 'paused' | 'completed' | 'cancelled' | 'failed' | 'awaiting_completion';

export type ErrorResponse = {
    /**
     * Error message
     */
    error: string;
};

export type GetOpenApiData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/openapi.yaml';
};

export type GetOpenApiResponses = {
    /**
     * OpenAPI schema
     */
    200: unknown;
};

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckErrors = {
    /**
     * API is unhealthy
     */
    500: {
        /**
         * The error message
         */
        error?: string;
    };
};

export type HealthCheckError = HealthCheckErrors[keyof HealthCheckErrors];

export type HealthCheckResponses = {
    /**
     * API is healthy
     */
    200: {
        /**
         * The health status of the API
         */
        status?: string;
    };
};

export type HealthCheckResponse = HealthCheckResponses[keyof HealthCheckResponses];

export type ExecuteAgentData = {
    body: AgentExecutionRequest;
    path: {
        /**
         * The ID of the agent
         */
        id: string;
    };
    query?: never;
    url: '/agent/{id}';
};

export type ExecuteAgentErrors = {
    /**
     * Invalid request
     */
    400: ErrorResponse;
    /**
     * Agent not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type ExecuteAgentError = ExecuteAgentErrors[keyof ExecuteAgentErrors];

export type ExecuteAgentResponses = {
    /**
     * Agent execution started successfully
     */
    202: ExecutionResponse;
};

export type ExecuteAgentResponse = ExecuteAgentResponses[keyof ExecuteAgentResponses];

export type GetExecutionStatusData = {
    body?: never;
    path: {
        /**
         * The ID of the execution
         */
        id: string;
    };
    query?: never;
    url: '/execution/{id}/status';
};

export type GetExecutionStatusErrors = {
    /**
     * Execution not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetExecutionStatusError = GetExecutionStatusErrors[keyof GetExecutionStatusErrors];

export type GetExecutionStatusResponses = {
    /**
     * Execution status retrieved successfully
     */
    200: ExecutionStatusResponse;
};

export type GetExecutionStatusResponse = GetExecutionStatusResponses[keyof GetExecutionStatusResponses];

export type GetExecutionResultData = {
    body?: never;
    path: {
        /**
         * The ID of the execution
         */
        id: string;
    };
    query?: never;
    url: '/execution/{id}/result';
};

export type GetExecutionResultErrors = {
    /**
     * Execution not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetExecutionResultError = GetExecutionResultErrors[keyof GetExecutionResultErrors];

export type GetExecutionResultResponses = {
    /**
     * Execution result retrieved successfully
     */
    200: ExecutionResultResponse;
};

export type GetExecutionResultResponse = GetExecutionResultResponses[keyof GetExecutionResultResponses];

export type ClientOptions = {
    baseUrl: 'https://odyssey.asteroid.ai/api/v1' | (string & {});
};