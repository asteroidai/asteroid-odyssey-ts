// This file is auto-generated by @hey-api/openapi-ts

/**
 * Request to execute an agent with specific parameters
 */
export type AgentExecutionRequest = {
    [key: string]: unknown;
};

export type ExecutionResponse = {
    /**
     * The ID of the execution
     */
    execution_id: string;
};

export type ExecutionStatusResponse = {
    /**
     * The ID of the execution
     */
    execution_id: string;
    status: Status;
    /**
     * Reason for the current status (if applicable)
     */
    reason?: string;
    /**
     * Time when the status was last updated
     */
    updated_at?: string;
};

export type ExecutionResultResponse = {
    /**
     * The ID of the execution
     */
    execution_id: string;
    status: Status;
    /**
     * (Deprecated, use execution_result instead) The structured result data from the execution. Contains the outcome, reasoning, final answer, and result.
     * @deprecated
     */
    result?: {
        [key: string]: unknown;
    };
    /**
     * Error message (if execution failed)
     */
    error?: string;
    execution_result?: ExecutionResult;
};

/**
 * The result of an execution. Contains the outcome, reasoning, and result.
 */
export type ExecutionResult = {
    /**
     * The outcome of the execution (success or failure)
     */
    outcome?: 'success' | 'failure';
    /**
     * The reasoning behind the execution outcome
     */
    reasoning?: string;
    /**
     * The structured result data from the execution. This will follow the format defined in the result_schema of the agent.
     */
    result?: {
        [key: string]: unknown;
    };
};

/**
 * Status of the execution
 */
export type Status = 'starting' | 'running' | 'paused' | 'completed' | 'cancelled' | 'failed' | 'awaiting_confirmation' | 'paused_by_agent';

export type ErrorResponse = {
    /**
     * Error message
     */
    error: string;
};

export type BrowserSessionRecordingResponse = {
    /**
     * The URL of the browser session recording
     */
    recording_url: string;
};

/**
 * Request to execute an agent with structured parameters including optional agent profile configuration
 */
export type StructuredAgentExecutionRequest = {
    /**
     * The ID of the browser profile to use
     */
    agent_profile_id?: string;
    /**
     * Dynamic data to be merged into the saved agent configuration.
     */
    dynamic_data?: {
        [key: string]: unknown;
    };
};

export type AgentProfile = {
    /**
     * Unique identifier for the agent profile
     */
    id: string;
    /**
     * Name of the agent profile (unique within organization)
     */
    name: string;
    /**
     * Description of the agent profile
     */
    description: string;
    /**
     * The ID of the organization that the agent profile belongs to
     */
    organization_id: string;
    proxy_cc: CountryCode;
    proxy_type: ProxyType;
    /**
     * Whether the captcha solver is active for this profile
     */
    captcha_solver_active: boolean;
    /**
     * Whether the same IP address should be used for all executions of this profile
     */
    sticky_ip: boolean;
    /**
     * List of credentials associated with this agent profile
     */
    credentials: Array<Credential>;
    /**
     * The date and time the agent profile was created
     */
    created_at: string;
    /**
     * The last update time of the agent profile
     */
    updated_at: string;
};

export type CreateAgentProfileRequest = {
    /**
     * Name of the agent profile (must be unique within organization)
     */
    name: string;
    /**
     * Description of the agent profile
     */
    description: string;
    /**
     * The ID of the organization that the agent profile belongs to
     */
    organization_id: string;
    proxy_cc: CountryCode;
    proxy_type: ProxyType;
    /**
     * Whether the captcha solver should be active for this profile
     */
    captcha_solver_active: boolean;
    /**
     * Whether the same IP address should be used for all executions of this profile
     */
    sticky_ip: boolean;
    /**
     * Optional list of credentials to create with the profile
     */
    credentials: Array<Credential>;
};

export type UpdateAgentProfileRequest = {
    /**
     * The name of the agent profile
     */
    name?: string;
    /**
     * The description of the agent profile
     */
    description?: string;
    proxy_cc?: CountryCode;
    proxy_type?: ProxyType;
    /**
     * Whether the captcha solver should be active for this profile
     */
    captcha_solver_active?: boolean;
    /**
     * Whether the same IP address should be used for all executions of this profile
     */
    sticky_ip?: boolean;
    /**
     * Complete list of credentials (replaces existing)
     */
    credentials?: Array<Credential>;
};

/**
 * Two-letter country code for proxy location
 */
export type CountryCode = 'us' | 'uk' | 'fr' | 'it' | 'jp' | 'au' | 'de' | 'fi' | 'ca';

/**
 * Type of proxy to use
 */
export type ProxyType = 'residential' | 'mobile';

export type Credential = {
    /**
     * The unique identifier for this credential
     */
    id?: string;
    /**
     * The credential name
     */
    name: string;
    /**
     * The encrypted credential
     */
    data: string;
    /**
     * When the credential was created
     */
    created_at?: string;
};

export type GetOpenApiData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/openapi.yaml';
};

export type GetOpenApiResponses = {
    /**
     * OpenAPI schema
     */
    200: unknown;
};

export type UploadExecutionFilesData = {
    body: {
        /**
         * Files to upload to the execution
         */
        files?: Array<Blob | File>;
    };
    path: {
        /**
         * The ID of the execution
         */
        id: string;
    };
    query?: never;
    url: '/execution/{id}/files';
};

export type UploadExecutionFilesErrors = {
    /**
     * Bad request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Execution not found
     */
    404: ErrorResponse;
};

export type UploadExecutionFilesError = UploadExecutionFilesErrors[keyof UploadExecutionFilesErrors];

export type UploadExecutionFilesResponses = {
    /**
     * Files uploaded successfully
     */
    200: {
        /**
         * Success message
         */
        message?: string;
        /**
         * IDs of the uploaded files
         */
        file_ids?: Array<string>;
    };
};

export type UploadExecutionFilesResponse = UploadExecutionFilesResponses[keyof UploadExecutionFilesResponses];

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckErrors = {
    /**
     * API is unhealthy
     */
    500: {
        /**
         * The error message
         */
        error?: string;
    };
};

export type HealthCheckError = HealthCheckErrors[keyof HealthCheckErrors];

export type HealthCheckResponses = {
    /**
     * API is healthy
     */
    200: {
        /**
         * The health status of the API
         */
        status?: string;
    };
};

export type HealthCheckResponse = HealthCheckResponses[keyof HealthCheckResponses];

export type ExecuteAgentData = {
    body: AgentExecutionRequest;
    path: {
        /**
         * The ID of the agent
         */
        id: string;
    };
    query?: never;
    url: '/agent/{id}';
};

export type ExecuteAgentErrors = {
    /**
     * Invalid request
     */
    400: ErrorResponse;
    /**
     * Agent not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type ExecuteAgentError = ExecuteAgentErrors[keyof ExecuteAgentErrors];

export type ExecuteAgentResponses = {
    /**
     * Agent execution started successfully
     */
    202: ExecutionResponse;
};

export type ExecuteAgentResponse = ExecuteAgentResponses[keyof ExecuteAgentResponses];

export type ExecuteAgentStructuredData = {
    body: StructuredAgentExecutionRequest;
    path: {
        /**
         * The ID of the agent
         */
        id: string;
    };
    query?: never;
    url: '/agent/{id}/execute';
};

export type ExecuteAgentStructuredErrors = {
    /**
     * Invalid request
     */
    400: ErrorResponse;
    /**
     * Agent not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type ExecuteAgentStructuredError = ExecuteAgentStructuredErrors[keyof ExecuteAgentStructuredErrors];

export type ExecuteAgentStructuredResponses = {
    /**
     * Agent execution started successfully
     */
    202: ExecutionResponse;
};

export type ExecuteAgentStructuredResponse = ExecuteAgentStructuredResponses[keyof ExecuteAgentStructuredResponses];

export type GetExecutionStatusData = {
    body?: never;
    path: {
        /**
         * The ID of the execution
         */
        id: string;
    };
    query?: never;
    url: '/execution/{id}/status';
};

export type GetExecutionStatusErrors = {
    /**
     * Execution not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetExecutionStatusError = GetExecutionStatusErrors[keyof GetExecutionStatusErrors];

export type GetExecutionStatusResponses = {
    /**
     * Execution status retrieved successfully
     */
    200: ExecutionStatusResponse;
};

export type GetExecutionStatusResponse = GetExecutionStatusResponses[keyof GetExecutionStatusResponses];

export type GetExecutionResultData = {
    body?: never;
    path: {
        /**
         * The ID of the execution
         */
        id: string;
    };
    query?: never;
    url: '/execution/{id}/result';
};

export type GetExecutionResultErrors = {
    /**
     * Execution not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetExecutionResultError = GetExecutionResultErrors[keyof GetExecutionResultErrors];

export type GetExecutionResultResponses = {
    /**
     * Execution result retrieved successfully
     */
    200: ExecutionResultResponse;
};

export type GetExecutionResultResponse = GetExecutionResultResponses[keyof GetExecutionResultResponses];

export type GetBrowserSessionRecordingData = {
    body?: never;
    path: {
        /**
         * The ID of the execution
         */
        id: string;
    };
    query?: never;
    url: '/execution/{id}/browser_session/recording';
};

export type GetBrowserSessionRecordingErrors = {
    /**
     * Browser session not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetBrowserSessionRecordingError = GetBrowserSessionRecordingErrors[keyof GetBrowserSessionRecordingErrors];

export type GetBrowserSessionRecordingResponses = {
    /**
     * Browser session recording retrieved successfully
     */
    200: BrowserSessionRecordingResponse;
};

export type GetBrowserSessionRecordingResponse = GetBrowserSessionRecordingResponses[keyof GetBrowserSessionRecordingResponses];

export type GetAgentProfilesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The ID of the organization to filter by
         */
        organization_id?: string;
    };
    url: '/agent-profiles';
};

export type GetAgentProfilesErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetAgentProfilesError = GetAgentProfilesErrors[keyof GetAgentProfilesErrors];

export type GetAgentProfilesResponses = {
    /**
     * List of agent profiles
     */
    200: Array<AgentProfile>;
};

export type GetAgentProfilesResponse = GetAgentProfilesResponses[keyof GetAgentProfilesResponses];

export type CreateAgentProfileData = {
    body: CreateAgentProfileRequest;
    path?: never;
    query?: never;
    url: '/agent-profiles';
};

export type CreateAgentProfileErrors = {
    /**
     * Bad request - Invalid input or profile name already exists
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type CreateAgentProfileError = CreateAgentProfileErrors[keyof CreateAgentProfileErrors];

export type CreateAgentProfileResponses = {
    /**
     * Agent profile created successfully
     */
    201: AgentProfile;
};

export type CreateAgentProfileResponse = CreateAgentProfileResponses[keyof CreateAgentProfileResponses];

export type DeleteAgentProfileData = {
    body?: never;
    path: {
        /**
         * The ID of the agent profile
         */
        profile_id: string;
    };
    query?: never;
    url: '/agent-profiles/{profile_id}';
};

export type DeleteAgentProfileErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Agent profile not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type DeleteAgentProfileError = DeleteAgentProfileErrors[keyof DeleteAgentProfileErrors];

export type DeleteAgentProfileResponses = {
    /**
     * Agent profile deleted successfully
     */
    200: {
        message?: string;
    };
};

export type DeleteAgentProfileResponse = DeleteAgentProfileResponses[keyof DeleteAgentProfileResponses];

export type GetAgentProfileData = {
    body?: never;
    path: {
        /**
         * The ID of the agent profile
         */
        profile_id: string;
    };
    query?: never;
    url: '/agent-profiles/{profile_id}';
};

export type GetAgentProfileErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Agent profile not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetAgentProfileError = GetAgentProfileErrors[keyof GetAgentProfileErrors];

export type GetAgentProfileResponses = {
    /**
     * Agent profile found
     */
    200: AgentProfile;
};

export type GetAgentProfileResponse = GetAgentProfileResponses[keyof GetAgentProfileResponses];

export type UpdateAgentProfileData = {
    body: UpdateAgentProfileRequest;
    path: {
        /**
         * The ID of the agent profile
         */
        profile_id: string;
    };
    query?: never;
    url: '/agent-profiles/{profile_id}';
};

export type UpdateAgentProfileErrors = {
    /**
     * Bad request - Invalid input
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Agent profile not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type UpdateAgentProfileError = UpdateAgentProfileErrors[keyof UpdateAgentProfileErrors];

export type UpdateAgentProfileResponses = {
    /**
     * Agent profile updated successfully
     */
    200: AgentProfile;
};

export type UpdateAgentProfileResponse = UpdateAgentProfileResponses[keyof UpdateAgentProfileResponses];

<<<<<<< HEAD
=======
export type GetCredentialsPublicKeyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/credentials/public_key';
};

export type GetCredentialsPublicKeyErrors = {
    /**
     * Public key not found
     */
    404: unknown;
};

export type GetCredentialsPublicKeyResponses = {
    /**
     * The public key for credentials
     */
    200: string;
};

export type GetCredentialsPublicKeyResponse = GetCredentialsPublicKeyResponses[keyof GetCredentialsPublicKeyResponses];

>>>>>>> 7b2a6de (feat: add support for agent profile management and encryption)
export type ClientOptions = {
    baseUrl: 'https://odyssey.asteroid.ai/api/v1' | `${string}://${string}/api/v1` | (string & {});
};